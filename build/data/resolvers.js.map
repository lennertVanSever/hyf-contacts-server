{"version":3,"sources":["../../src/data/resolvers.js"],"names":["resolvers","contact","notes","id","Promise","resolve","reject","query","connection","error","results","note","contact_id","Query","contacts","Mutation","module","exports"],"mappings":";;AAAA;;AACA;;;;;;AAEA,IAAMA,YAAY;AAChBC,WAAS;AACPC,WAAO,qBAAY;AAAA,UAATC,EAAS,QAATA,EAAS;;AACjB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,iDAAN;AACAC,+BAAWD,KAAX,CAAiBA,KAAjB,EAAwB,CAACJ,EAAD,CAAxB,EAA8B,UAACM,KAAD,EAAQC,OAAR,EAAoB;AAChD,cAAID,KAAJ,EAAW,OAAOH,OAAOG,KAAP,CAAP;AACXJ,kBAAQK,OAAR;AACD,SAHD;AAID,OANM,CAAP;AAOD;AATM,GADO;AAYhBC,QAAM;AACJV,aAAS,wBAAoB;AAAA,UAAjBW,UAAiB,SAAjBA,UAAiB;;AAC3B,aAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,4CAAN;AACAC,+BAAWD,KAAX,CAAiBA,KAAjB,EAAwB,CAACK,UAAD,CAAxB,EAAsC,UAACH,KAAD,EAAQC,OAAR,EAAoB;AACxD,cAAID,KAAJ,EAAW,OAAOH,OAAOG,KAAP,CAAP;AACXJ,kBAAQK,QAAQ,CAAR,CAAR;AACD,SAHD;AAID,OANM,CAAP;AAOD;AATG,GAZU;AAuBhBG,SAAO;AACLC,cAAS,oBAAM;AACb,aAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,+BAAN;AACAC,+BAAWD,KAAX,CAAiBA,KAAjB,EAAwB,UAACE,KAAD,EAAQC,OAAR,EAAoB;AAC1C,cAAID,KAAJ,EAAW,OAAOH,OAAOG,KAAP,CAAP;AACXJ,kBAAQK,OAAR;AACD,SAHD;AAID,OANM,CAAP;AAOD,KATI;AAULR,WAAM,iBAAM;AACV,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,4BAAN;AACAC,+BAAWD,KAAX,CAAiBA,KAAjB,EAAwB,UAACE,KAAD,EAAQC,OAAR,EAAoB;AAC1C,cAAID,KAAJ,EAAW,OAAOH,OAAOG,KAAP,CAAP;AACXJ,kBAAQK,OAAR;AACD,SAHD;AAID,OANM,CAAP;AAOD;AAlBI,GAvBS;AA2ChBK,YAAUA,oBAASA;AA3CH,CAAlB;;AA8CAC,OAAOC,OAAP,GAAiB;AACfjB;AADe,CAAjB","file":"resolvers.js","sourcesContent":["import { connection } from './connection';\nimport Mutation from './mutations';\n\nconst resolvers = {\n  contact: {\n    notes: ({ id }) => {\n      return new Promise((resolve, reject) => {\n        const query = `SELECT * from note where contact_id = ?`;\n        connection.query(query, [id], (error, results) => {\n          if (error) return reject(error);\n          resolve(results);\n        });\n      })\n    }\n  },\n  note: {\n    contact: ({ contact_id }) => {\n      return new Promise((resolve, reject) => {\n        const query = `SELECT * from contact where id = ?`;\n        connection.query(query, [contact_id], (error, results) => {\n          if (error) return reject(error);\n          resolve(results[0]);\n        });\n      })\n    }\n  },\n  Query: {\n    contacts:() => {\n      return new Promise((resolve, reject) => {\n        const query = `SELECT * from contact`;\n        connection.query(query, (error, results) => {\n          if (error) return reject(error);\n          resolve(results);\n        });\n      })\n    },\n    notes:() => {\n      return new Promise((resolve, reject) => {\n        const query = `SELECT * from note`;\n        connection.query(query, (error, results) => {\n          if (error) return reject(error);\n          resolve(results);\n        });\n      })\n    }\n  },\n  Mutation: Mutation.Mutation,\n}\n\nmodule.exports = {\n  resolvers\n}\n"]}